#!/bin/bash
source ${AKAUNTING_RUNTIME_DIR}/env-defaults

AKAUNTING_TEMPLATES_DIR=${AKAUNTING_RUNTIME_DIR}/config
AKAUNTING_APP_CONFIG=${AKAUNTING_CONFIG_DIR}/.env
AKAUNTING_NGINX_CONFIG=${AKAUNTING_RUNTIME_DIR}/nginx/conf.d/akaunting.conf

# Compares two version strings `a` and `b`
# Returns
#   - negative integer, if `a` is less than `b`
#   - 0, if `a` and `b` are equal
#   - non-negative integer, if `a` is greater than `b`
vercmp() {
  expr '(' "$1" : '\([^.]*\)' ')' '-' '(' "$2" : '\([^.]*\)' ')' '|' \
       '(' "$1.0" : '[^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0" : '[^.]*[.]\([^.]*\)' ')' '|' \
       '(' "$1.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '|' \
       '(' "$1.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')'
}

# Read YAML file from Bash script
# Credits: https://gist.github.com/pkuczynski/8665367
parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

php_config_get() {
  local config=${1?config file not specified}
  local key=${2?key not specified}
  exec_as_akaunting sed -n -e "s/^\(${key}=\)\(.*\)\(.*\)$/\2/p" ${config}
}

php_config_set() {
  local config=${1?config file not specified}
  local key=${2?key not specified}
  local value=${3?value not specified}
  local verbosity=${4:-verbose}

  if [[ ${verbosity} == verbose ]]; then
    echo "Setting ${config} parameter: ${key}=${value}"
  fi

  local current=$(php_config_get ${config} ${key})
  if [[ "${current}" != "${value}" ]]; then
    if [[ $(sed -n -e "s/^[;]*[ ]*\(${key}\)=.*/\1/p" ${config}) == ${key} ]]; then
      value="$(echo "${value}" | sed 's|[&]|\\&|g')"
      exec_as_akaunting sed -i "s|^[;]*[ ]*${key}=.*|${key}=${value}|" ${config}
    else
      echo "${key}=${value}" | exec_as_akaunting tee -a ${config} >/dev/null
    fi
  fi
}

## Execute a command as AKAUNTING_USER
exec_as_akaunting() {
  if [[ $(whoami) == ${AKAUNTING_USER} ]]; then
    $@
  else
    sudo -HEu ${AKAUNTING_USER} "$@"
  fi
}

artisan_cli() {
  exec_as_akaunting php artisan "$@"
}

## Copies configuration template in ${AKAUNTING_TEMPLATES_DIR} to the destination as the specified USER
# $1: ownership of destination file, uses `chown`
# $2: source file
# $3: destination location
# $4: mode of destination, uses `chmod` (default: 0644)
install_template() {
  local OWNERSHIP=${1}
  local SRC=${2}
  local DEST=${3}
  local MODE=${4:-0644}
  if [[ -f ${AKAUNTING_TEMPLATES_DIR}/${SRC} ]]; then
    cp ${AKAUNTING_TEMPLATES_DIR}/${SRC} ${DEST}
  fi
  chmod ${MODE} ${DEST}
  chown ${OWNERSHIP} ${DEST}
}

## Replace placeholders with values
# $1: file with placeholders to replace
# $x: placeholders to replace
update_template() {
  local FILE=${1?missing argument}
  shift

  [[ ! -f ${FILE} ]] && return 1

  local VARIABLES=($@)
  local USR=$(stat -c %U ${FILE})
  local tmp_file=$(mktemp)
  cp -a "${FILE}" ${tmp_file}

  local variable
  for variable in ${VARIABLES[@]}; do
    # Keep the compatibilty: {{VAR}} => ${VAR}
    sed -ri "s/[{]{2}$variable[}]{2}/\${$variable}/g" ${tmp_file}
  done

  # Replace placeholders
  (
    export ${VARIABLES[@]}
    local IFS=":"; sudo -HEu ${USR} envsubst "${VARIABLES[*]/#/$}" < ${tmp_file} > ${FILE}
  )
  rm -f ${tmp_file}
}

akaunting_finalize_database_parameters() {
  # is a mysql database linked?
  # requires that the mysql container has exposed port 3306.
  if [[ -n ${MYSQL_PORT_3306_TCP_ADDR} ]]; then
    DB_TYPE=${DB_TYPE:-mysql}
    DB_HOST=${DB_HOST:-mysql}
    DB_PORT=${DB_PORT:-$MYSQL_PORT_3306_TCP_PORT}

    # support for linked sameersbn/mysql image
    DB_USER=${DB_USER:-$MYSQL_ENV_DB_USER}
    DB_PASS=${DB_PASS:-$MYSQL_ENV_DB_PASS}
    DB_NAME=${DB_NAME:-$MYSQL_ENV_DB_NAME}

    # support for linked orchardup/mysql and enturylink/mysql image
    # also supports official mysql image
    DB_USER=${DB_USER:-$MYSQL_ENV_MYSQL_USER}
    DB_PASS=${DB_PASS:-$MYSQL_ENV_MYSQL_PASSWORD}
    DB_NAME=${DB_NAME:-$MYSQL_ENV_MYSQL_DATABASE}
  fi

  if [[ -z ${DB_HOST} ]]; then
    echo
    echo "ERROR: "
    echo "  Please configure the database connection."
    echo "  Cannot continue without a database. Aborting..."
    echo
    return 1
  fi

  # use default port number if it is still not set
  case ${DB_TYPE} in
    mysql) DB_PORT=${DB_PORT:-3306} ;;
    *)
      echo
      echo "ERROR: "
      echo "  Please specify the database type in use via the DB_TYPE configuration option."
      echo "  Accepted values are \"mysql\". Aborting..."
      echo
      return 1
      ;;
  esac

  # set default user and database
  DB_USER=${DB_USER:-root}
  DB_NAME=${DB_NAME:-akauntingdb}
}

akaunting_finalize_php_fpm_parameters() {
  # is a akaunting-php-fpm container linked?
  if [[ -n ${PHP_FPM_PORT_9000_TCP_ADDR} ]]; then
    AKAUNTING_PHP_FPM_HOST=${AKAUNTING_PHP_FPM_HOST:-$PHP_FPM_PORT_9000_TCP_ADDR}
    AKAUNTING_PHP_FPM_PORT=${AKAUNTING_PHP_FPM_PORT:-$PHP_FPM_PORT_9000_TCP_PORT}
  fi

  if [[ -z ${AKAUNTING_PHP_FPM_HOST} ]]; then
    echo
    echo "ERROR: "
    echo "  Please configure the php-fpm connection. Aborting..."
    echo
    return 1
  fi

  # use default php-fpm port number if it is still not set
  AKAUNTING_PHP_FPM_PORT=${AKAUNTING_PHP_FPM_PORT:-9000}
}

akaunting_check_database_connection() {
  akaunting_finalize_database_parameters
  case ${DB_TYPE} in
    mysql)
      prog="mysqladmin -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} ${DB_PASS:+-p$DB_PASS} status"
      ;;
  esac
  timeout=60
  while ! ${prog} >/dev/null 2>&1
  do
    timeout=$(expr $timeout - 1)
    if [[ $timeout -eq 0 ]]; then
      echo
      echo "Could not connect to database server. Aborting..."
      return 1
    fi
    echo -n "."
    sleep 1
  done
  echo
}

akaunting_upgrade() {
  # perform installation on firstrun
  case ${DB_TYPE} in
    mysql)
      QUERY="SELECT count(*) FROM information_schema.tables WHERE table_schema = '${DB_NAME}';"
      COUNT=$(mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} ${DB_PASS:+-p$DB_PASS} -ss -e "${QUERY}")
      ;;
  esac

  local update_version=false
  if [[ -z ${COUNT} || ${COUNT} -eq 0 ]]; then
    echo "Setting up Akaunting for firstrun..."
    artisan_cli install \
      --db-host "${DB_HOST}" --db-port "${DB_PORT}" \
      --db-name "${DB_NAME}" --db-username "${DB_USER}" --db-password "${DB_PASS}" \
      --company-name "${AKAUNTING_COMPANY_NAME}" --company-email "${AKAUNTING_COMPANY_EMAIL}" \
      --admin-email "${AKAUNTING_ADMIN_EMAIL}" --admin-password "${AKAUNTING_ADMIN_PASSWORD}"

    # move configuration to persistent store and create symlink
    exec_as_akaunting mv -u ${AKAUNTING_INSTALL_DIR}/.env ${AKAUNTING_APP_CONFIG}
    ln -sf ${AKAUNTING_APP_CONFIG} ${AKAUNTING_INSTALL_DIR}/.env

    update_version=true
  else
    CACHE_VERSION=
    [[ -f ${AKAUNTING_CONFIG_DIR}/VERSION ]] && CACHE_VERSION=$(cat ${AKAUNTING_CONFIG_DIR}/VERSION)
    if [[ ${AKAUNTING_VERSION} != ${CACHE_VERSION} ]]; then
      ## version check, only upgrades are allowed
      if [[ -n ${CACHE_VERSION} && $(vercmp ${AKAUNTING_VERSION} ${CACHE_VERSION}) -lt 0 ]]; then
        echo
        echo "ERROR: "
        echo "  Cannot downgrade from Akaunting version ${CACHE_VERSION} to ${AKAUNTING_VERSION}."
        echo "  Only upgrades are allowed. Please use sameersbn/akaunting:${CACHE_VERSION} or higher."
        echo "  Cannot continue. Aborting!"
        echo
        return 1
      fi

      echo "Upgrading Akaunting..."
      artisan_cli down
      artisan_cli migrate --force
      artisan_cli up

      update_version=true
    fi
  fi

  if [[ ${update_version} == true ]]; then
    echo -n "${AKAUNTING_VERSION}" | exec_as_akaunting tee ${AKAUNTING_CONFIG_DIR}/VERSION >/dev/null
  fi
}

akaunting_configure_domain() {
  echo "Configuring Akaunting::URL..."
  php_config_set ${AKAUNTING_APP_CONFIG} APP_URL ${AKAUNTING_URL}
}

nginx_configure_virtualhost() {
  echo "Configuring Akaunting virtualhost..."
  akaunting_finalize_php_fpm_parameters
  update_template ${AKAUNTING_NGINX_CONFIG} \
    AKAUNTING_FQDN \
    AKAUNTING_HTTPS \
    AKAUNTING_PHP_FPM_HOST \
    AKAUNTING_PHP_FPM_PORT
}

install_configuration_templates() {
  echo "Installing configuration templates..."
  if [[ ! -f ${AKAUNTING_NGINX_CONFIG} ]]; then
    install_template root: nginx/akaunting.example.conf ${AKAUNTING_NGINX_CONFIG} 0644
    update_template ${AKAUNTING_NGINX_CONFIG} AKAUNTING_INSTALL_DIR
  fi
}

initialize_datadir() {
  echo "Initializing datadir..."
  mkdir -p ${AKAUNTING_DATA_DIR}
  chmod 0755 ${AKAUNTING_DATA_DIR}
  chown ${AKAUNTING_USER}: ${AKAUNTING_DATA_DIR}

  # create uploads directory
  mkdir -p ${AKAUNTING_UPLOADS_DIR}
  chown -R ${AKAUNTING_USER}: ${AKAUNTING_UPLOADS_DIR}
  chmod -R 0755 ${AKAUNTING_UPLOADS_DIR}

  # setup symlink to uploads directory
  rm -rf ${AKAUNTING_INSTALL_DIR}/storage/app/uploads
  ln -sf ${AKAUNTING_UPLOADS_DIR} ${AKAUNTING_INSTALL_DIR}/storage/app/uploads

  # create config directory
  mkdir -p ${AKAUNTING_CONFIG_DIR}
  chown -R ${AKAUNTING_USER}: ${AKAUNTING_CONFIG_DIR}
  chmod -R 0755 ${AKAUNTING_CONFIG_DIR}

  # create backups directory
  mkdir -p ${AKAUNTING_BACKUPS_DIR}
  chmod -R 0755 ${AKAUNTING_BACKUPS_DIR}
  chown -R ${AKAUNTING_USER}: ${AKAUNTING_BACKUPS_DIR}

  # NGINX virtualhost configuration
  rm -rf ${AKAUNTING_RUNTIME_DIR}/nginx/conf.d/*.conf
  chmod -R 0755 ${AKAUNTING_RUNTIME_DIR}/nginx/conf.d
}

install_akaunting() {
    if [[ ! -f ${AKAUNTING_BUILD_DIR}/Akaunting_${AKAUNTING_VERSION}-Stable.zip ]]; then
      echo "Downloading Akaunting ${AKAUNTING_VERSION}..."
      mkdir -p ${AKAUNTING_BUILD_DIR}
      wget "https://github.com/akaunting/akaunting/releases/download/${AKAUNTING_VERSION}/Akaunting_${AKAUNTING_VERSION}-Stable.zip" -O ${AKAUNTING_BUILD_DIR}/Akaunting_${AKAUNTING_VERSION}-Stable.zip
    fi

    echo "Extracting Akaunting ${AKAUNTING_VERSION}..."
    mkdir -p ${AKAUNTING_INSTALL_DIR}
    cd ${AKAUNTING_INSTALL_DIR}
    unzip -uq ${AKAUNTING_BUILD_DIR}/Akaunting_${AKAUNTING_VERSION}-Stable.zip
    rm -fv ${AKAUNTING_BUILD_DIR}/Akaunting_${AKAUNTING_VERSION}-Stable.zip

    # set directory permissions
    find ${AKAUNTING_INSTALL_DIR}/ -type f -print0 | xargs -0 chmod 0644
    find ${AKAUNTING_INSTALL_DIR}/ -type d -print0 | xargs -0 chmod 0755

    chown -R ${AKAUNTING_USER}:${AKAUNTING_USER} ${AKAUNTING_INSTALL_DIR}/
    chown ${AKAUNTING_USER} ${AKAUNTING_INSTALL_DIR}/

    chown -R ${AKAUNTING_USER}: ${AKAUNTING_INSTALL_DIR}/storage/
    chown -R ${AKAUNTING_USER}: ${AKAUNTING_INSTALL_DIR}/bootstrap/cache/

    chown ${AKAUNTING_USER}:${AKAUNTING_USER} ${AKAUNTING_INSTALL_DIR}/.env.example
    chmod 0644 ${AKAUNTING_INSTALL_DIR}/.env.example

    chown ${AKAUNTING_USER}:${AKAUNTING_USER} ${AKAUNTING_INSTALL_DIR}/.htaccess
    chmod 0644 ${AKAUNTING_INSTALL_DIR}/.htaccess

    touch ${AKAUNTING_INSTALL_DIR}/.user.ini
    chown ${AKAUNTING_USER}:${AKAUNTING_USER} ${AKAUNTING_INSTALL_DIR}/.user.ini
    chmod 0644 ${AKAUNTING_INSTALL_DIR}/.user.ini
}

initialize_system() {
  initialize_datadir
  install_configuration_templates
}

configure_akaunting() {
  echo "Configuring Akaunting..."
  akaunting_upgrade
  akaunting_configure_domain
}

configure_nginx() {
  echo "Configuring nginx..."
  nginx_configure_virtualhost
}
